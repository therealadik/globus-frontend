/* tslint:disable */
/* eslint-disable */
/**
 * Financial Monitoring and Reporting API
 * API for financial monitoring and reporting
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@our-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  NewTransactionRequestDto,
  TransactionResponseDto,
  UpdateTransactionRequestDto,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    NewTransactionRequestDtoFromJSON,
    NewTransactionRequestDtoToJSON,
    TransactionResponseDtoFromJSON,
    TransactionResponseDtoToJSON,
    UpdateTransactionRequestDtoFromJSON,
    UpdateTransactionRequestDtoToJSON,
} from '../models/index';

export interface CreateRequest {
    newTransactionRequestDto: NewTransactionRequestDto;
}

export interface UpdateTransactionRequest {
    updateTransactionRequestDto: UpdateTransactionRequestDto;
}

/**
 * 
 */
export class TransactionControllerApi extends runtime.BaseAPI {

    /**
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponseDto>> {
        if (requestParameters['newTransactionRequestDto'] == null) {
            throw new runtime.RequiredError(
                'newTransactionRequestDto',
                'Required parameter "newTransactionRequestDto" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewTransactionRequestDtoToJSON(requestParameters['newTransactionRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponseDto> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTransactionRaw(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponseDto>> {
        if (requestParameters['updateTransactionRequestDto'] == null) {
            throw new runtime.RequiredError(
                'updateTransactionRequestDto',
                'Required parameter "updateTransactionRequestDto" was null or undefined when calling updateTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTransactionRequestDtoToJSON(requestParameters['updateTransactionRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateTransaction(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponseDto> {
        const response = await this.updateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
