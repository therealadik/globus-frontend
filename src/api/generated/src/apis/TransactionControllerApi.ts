/* tslint:disable */
/* eslint-disable */
/**
 * Financial Monitoring and Reporting API
 * API for financial monitoring and reporting
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@our-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  NewTransactionRequestDto,
  TransactionFilterDto,
  TransactionFilterResponseDto,
  TransactionResponseDto,
  UpdateTransactionRequestDto,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    NewTransactionRequestDtoFromJSON,
    NewTransactionRequestDtoToJSON,
    TransactionFilterDtoFromJSON,
    TransactionFilterDtoToJSON,
    TransactionFilterResponseDtoFromJSON,
    TransactionFilterResponseDtoToJSON,
    TransactionResponseDtoFromJSON,
    TransactionResponseDtoToJSON,
    UpdateTransactionRequestDtoFromJSON,
    UpdateTransactionRequestDtoToJSON,
} from '../models/index';

export interface CreateRequest {
    newTransactionRequestDto: NewTransactionRequestDto;
}

export interface DeleteTransactionRequest {
    id: number;
}

export interface FindTransactionsByFilterRequest {
    transactionFilterDto: TransactionFilterDto;
}

export interface UpdateTransactionRequest {
    updateTransactionRequestDto: UpdateTransactionRequestDto;
}

/**
 * 
 */
export class TransactionControllerApi extends runtime.BaseAPI {

    /**
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponseDto>> {
        if (requestParameters['newTransactionRequestDto'] == null) {
            throw new runtime.RequiredError(
                'newTransactionRequestDto',
                'Required parameter "newTransactionRequestDto" was null or undefined when calling create().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewTransactionRequestDtoToJSON(requestParameters['newTransactionRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponseDto> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteTransactionRaw(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transaction/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteTransaction(requestParameters: DeleteTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTransactionRaw(requestParameters, initOverrides);
    }

    /**
     */
    async findTransactionsByFilterRaw(requestParameters: FindTransactionsByFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionFilterResponseDto>> {
        if (requestParameters['transactionFilterDto'] == null) {
            throw new runtime.RequiredError(
                'transactionFilterDto',
                'Required parameter "transactionFilterDto" was null or undefined when calling findTransactionsByFilter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction/filter`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionFilterDtoToJSON(requestParameters['transactionFilterDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionFilterResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async findTransactionsByFilter(requestParameters: FindTransactionsByFilterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionFilterResponseDto> {
        const response = await this.findTransactionsByFilterRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPdfReportRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/transaction/report/pdf`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getPdfReport(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getPdfReportRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateTransactionRaw(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionResponseDto>> {
        if (requestParameters['updateTransactionRequestDto'] == null) {
            throw new runtime.RequiredError(
                'updateTransactionRequestDto',
                'Required parameter "updateTransactionRequestDto" was null or undefined when calling updateTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/transaction`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTransactionRequestDtoToJSON(requestParameters['updateTransactionRequestDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async updateTransaction(requestParameters: UpdateTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionResponseDto> {
        const response = await this.updateTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
