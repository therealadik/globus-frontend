/* tslint:disable */
/* eslint-disable */
/**
 * Financial Monitoring and Reporting API
 * API for financial monitoring and reporting
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@our-company.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TransactionResponseDto
 */
export interface TransactionResponseDto {
    /**
     * 
     * @type {number}
     * @memberof TransactionResponseDto
     */
    id?: number;
    /**
     * 
     * @type {Date}
     * @memberof TransactionResponseDto
     */
    transactionDate?: Date;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponseDto
     */
    personType?: TransactionResponseDtoPersonTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponseDto
     */
    transactionType?: TransactionResponseDtoTransactionTypeEnum;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponseDto
     */
    amount?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponseDto
     */
    status?: TransactionResponseDtoStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponseDto
     */
    bankSenderId?: number;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponseDto
     */
    bankReceiverId?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponseDto
     */
    innReceiver?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponseDto
     */
    accountReceiver?: string;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponseDto
     */
    accountSender?: string;
    /**
     * 
     * @type {number}
     * @memberof TransactionResponseDto
     */
    categoryId?: number;
    /**
     * 
     * @type {string}
     * @memberof TransactionResponseDto
     */
    phoneReceiver?: string;
}


/**
 * @export
 */
export const TransactionResponseDtoPersonTypeEnum = {
    Physical: 'PHYSICAL',
    Legal: 'LEGAL'
} as const;
export type TransactionResponseDtoPersonTypeEnum = typeof TransactionResponseDtoPersonTypeEnum[keyof typeof TransactionResponseDtoPersonTypeEnum];

/**
 * @export
 */
export const TransactionResponseDtoTransactionTypeEnum = {
    Income: 'INCOME',
    Expense: 'EXPENSE'
} as const;
export type TransactionResponseDtoTransactionTypeEnum = typeof TransactionResponseDtoTransactionTypeEnum[keyof typeof TransactionResponseDtoTransactionTypeEnum];

/**
 * @export
 */
export const TransactionResponseDtoStatusEnum = {
    New: 'NEW',
    Confirmed: 'CONFIRMED',
    Processing: 'PROCESSING',
    Canceled: 'CANCELED',
    Completed: 'COMPLETED',
    Deleted: 'DELETED',
    Returned: 'RETURNED'
} as const;
export type TransactionResponseDtoStatusEnum = typeof TransactionResponseDtoStatusEnum[keyof typeof TransactionResponseDtoStatusEnum];


/**
 * Check if a given object implements the TransactionResponseDto interface.
 */
export function instanceOfTransactionResponseDto(value: object): value is TransactionResponseDto {
    return true;
}

export function TransactionResponseDtoFromJSON(json: any): TransactionResponseDto {
    return TransactionResponseDtoFromJSONTyped(json, false);
}

export function TransactionResponseDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionResponseDto {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'transactionDate': json['transactionDate'] == null ? undefined : (new Date(json['transactionDate'])),
        'personType': json['personType'] == null ? undefined : json['personType'],
        'transactionType': json['transactionType'] == null ? undefined : json['transactionType'],
        'amount': json['amount'] == null ? undefined : json['amount'],
        'status': json['status'] == null ? undefined : json['status'],
        'bankSenderId': json['bankSenderId'] == null ? undefined : json['bankSenderId'],
        'bankReceiverId': json['bankReceiverId'] == null ? undefined : json['bankReceiverId'],
        'innReceiver': json['innReceiver'] == null ? undefined : json['innReceiver'],
        'accountReceiver': json['accountReceiver'] == null ? undefined : json['accountReceiver'],
        'accountSender': json['accountSender'] == null ? undefined : json['accountSender'],
        'categoryId': json['categoryId'] == null ? undefined : json['categoryId'],
        'phoneReceiver': json['phoneReceiver'] == null ? undefined : json['phoneReceiver'],
    };
}

export function TransactionResponseDtoToJSON(json: any): TransactionResponseDto {
    return TransactionResponseDtoToJSONTyped(json, false);
}

export function TransactionResponseDtoToJSONTyped(value?: TransactionResponseDto | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'transactionDate': value['transactionDate'] == null ? undefined : ((value['transactionDate']).toISOString()),
        'personType': value['personType'],
        'transactionType': value['transactionType'],
        'amount': value['amount'],
        'status': value['status'],
        'bankSenderId': value['bankSenderId'],
        'bankReceiverId': value['bankReceiverId'],
        'innReceiver': value['innReceiver'],
        'accountReceiver': value['accountReceiver'],
        'accountSender': value['accountSender'],
        'categoryId': value['categoryId'],
        'phoneReceiver': value['phoneReceiver'],
    };
}

